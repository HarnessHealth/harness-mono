name: Deploy to AWS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - backend
          - admin-frontend
          - lambda

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: harness
  USE_CODEBUILD: true

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
      - name: Install dependencies
        run: poetry install
        
      - name: Run tests
        run: poetry run pytest

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.component == 'all' || github.event.inputs.component == 'backend'))
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-deploy
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile.backend.optimized
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:backend-${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:backend-latest
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:backend-buildcache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:backend-buildcache,mode=max
          target: production
          
      - name: Update ECS service
        if: github.ref == 'refs/heads/main'
        run: |
          aws ecs update-service \
            --cluster harness-cluster-production \
            --service harness-api-service-production \
            --force-new-deployment

  build-admin-frontend:
    name: Build Admin Frontend
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.component == 'all' || github.event.inputs.component == 'admin-frontend'))
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-deploy
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: admin-frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: admin-frontend
        run: npm ci
        
      - name: Build admin frontend
        working-directory: admin-frontend
        run: npm run build
        env:
          VITE_API_URL: ${{ github.ref == 'refs/heads/main' && 'https://api.harness.health' || 'https://api-staging.harness.health' }}
          
      - name: Deploy to S3
        working-directory: admin-frontend
        run: |
          BUCKET_NAME="harness-admin-frontend-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}-${{ secrets.AWS_ACCOUNT_ID }}"
          aws s3 sync dist/ s3://$BUCKET_NAME/ --delete
          
      - name: Invalidate CloudFront
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[0].DomainName=='harness-admin-frontend-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}-${{ secrets.AWS_ACCOUNT_ID }}.s3.amazonaws.com'].Id" --output text)
          if [ -n "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
          fi

  build-lambda:
    name: Build Lambda Functions
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.component == 'all' || github.event.inputs.component == 'lambda'))
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-deploy
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and push GROBID processor
        uses: docker/build-push-action@v5
        with:
          context: ./data-pipeline/lambdas/grobid_processor
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:grobid-processor-${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:grobid-processor-latest
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:grobid-buildcache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:grobid-buildcache,mode=max
          
      - name: Update Lambda function
        if: github.ref == 'refs/heads/main'
        run: |
          aws lambda update-function-code \
            --function-name harness-grobid-processor-production \
            --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:grobid-processor-latest

  notify:
    name: Notify Deployment Status
    needs: [build-backend, build-admin-frontend, build-lambda]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send notification
        uses: 8398a7/action-slack@v3
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status }} for ${{ github.ref }}
            Component: ${{ github.event.inputs.component || 'all' }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}