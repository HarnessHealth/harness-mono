version: 0.2

phases:
  pre_build:
    commands:
      - echo "=== Fresh GitHub Clone Build Process ==="
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$ECR_REPOSITORY_URI
      - echo "Cloning fresh code from GitHub..."
      - rm -rf /tmp/harness-fresh
      - git clone https://$GITHUB_TOKEN@github.com/HarnessHealth/harness-mono.git /tmp/harness-fresh
      - cd /tmp/harness-fresh
      - COMMIT_HASH=$(git rev-parse --short HEAD)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo "Using fresh code from commit: $COMMIT_HASH"
      - echo Build started on `date`
      
  build:
    commands:
      - echo "Building Docker image from fresh GitHub clone..."
      - echo "Current directory: $(pwd)"
      - echo "Directory contents:"
      - ls -la
      - echo "Checking for required files:"
      - ls -la infrastructure/docker/Dockerfile.backend.optimized
      - ls -la pyproject.toml
      - ls -la backend/
      - echo "Git status in fresh clone:"
      - git status --porcelain
      - git log --oneline -3
      - |
        docker buildx create --use --driver docker-container
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=registry,ref=$REPOSITORY_URI:buildcache \
          --cache-to type=registry,ref=$REPOSITORY_URI:buildcache,mode=max \
          --build-arg HUGGINGFACE_ACCESS_TOKEN=$HUGGINGFACE_ACCESS_TOKEN \
          --tag $REPOSITORY_URI:$IMAGE_TAG \
          --tag $REPOSITORY_URI:latest \
          --target production \
          --push \
          -f infrastructure/docker/Dockerfile.backend.optimized .
      
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushed $REPOSITORY_URI:$IMAGE_TAG
      - |
        # Update ECS service with new image
        echo "Updating ECS service..."
        CLUSTER_NAME="harness-main-development"
        SERVICE_NAME="harness-api-development"
        
        # Check if cluster exists
        if aws ecs describe-clusters --clusters $CLUSTER_NAME --query 'clusters[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
          echo "Cluster $CLUSTER_NAME is active"
          
          # Check if service exists
          if aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
            echo "Service $SERVICE_NAME exists, updating..."
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --force-new-deployment && echo "✅ ECS service updated successfully" || echo "❌ ECS service update failed"
          else
            echo "⚠️  Service $SERVICE_NAME not found in cluster $CLUSTER_NAME"
          fi
        else
          echo "⚠️  Cluster $CLUSTER_NAME not found or not active"
        fi

cache:
  paths:
    - '/root/.cache/pip/**/*'
    - '/root/.cache/poetry/**/*'